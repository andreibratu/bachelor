        -:    0:Source:controller/UserController.cpp
        -:    0:Graph:user_controller.gcno
        -:    0:Data:user_controller.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "UserController.h"
        -:    2:
        -:    3:
        2:    4:UserController::UserController(Repository& repo): r{repo} {
        2:    5:  this->current = -1;
        2:    6:}
        -:    7:
        -:    8:
        6:    9:void UserController::queryByGenre(const std::string& genre) {
       12:   10:  Movie key{"", genre, "", -1};
       12:   11:  std::vector<Movie> ans;
        -:   12:
       12:   13:  std::vector<Movie> all = this->r.getAll();
        -:   14:
       24:   15:  for(int i = 0; i < (int)all.size(); i++) {
       18:   16:    if(all[i] == key) {
       18:   17:      ans.push_back(Movie(all[i]));
        -:   18:    }
        -:   19:  }
        -:   20:
       22:   21:  for(int i = 0; i < (int)ans.size(); i++) {
       20:   22:    for(int j = 0; j < (int)this->watchlist.size(); j++) {
        4:   23:      if(ans[i] == this->watchlist[j]) {
        2:   24:        ans.erase(ans.begin() + i);
        -:   25:      }
        -:   26:    }
        -:   27:  }
        -:   28:
        6:   29:  this->query = ans;
        6:   30:  this->current = 0;
        6:   31:}
        -:   32:
        -:   33:
        6:   34:void UserController::nextMovie() {
        6:   35:  if(this->current == -1) throw std::exception();
        6:   36:  int allCount = this->query.size();
        6:   37:  this->current = (this->current == allCount-1) ? (0):(this->current+1);
        6:   38:}
        -:   39:
        -:   40:
        2:   41:void UserController::addToWatchList() {
        2:   42:  if(!this->query.size()) return;
        -:   43:
        2:   44:  this->watchlist.push_back(Movie(this->query[this->current]));
        2:   45:  this->query.erase(this->query.begin() + this->current);
        -:   46:}
        -:   47:
        -:   48:
        2:   49:Movie UserController::seeDetails() {
        2:   50:  return this->query[this->current];
        -:   51:}
        -:   52:
        -:   53:
        2:   54:void UserController::removeWatchlist(int idx, int was_liked) {
        2:   55:  if(idx < 0 || idx >= (int)this->watchlist.size() || was_liked < 0 || was_liked > 1) {
    #####:   56:    throw std::exception();
        -:   57:  }
        -:   58:
        4:   59:  Movie m = this->watchlist[idx];
        2:   60:  for(int i = 0; i < (int)this->r.movies.size() && was_liked; i++) {
        2:   61:    if(this->r.movies[i] == m) {
        2:   62:      int likes = this->r.movies[i].getLikes() + 1;
        2:   63:      this->r.movies[i].setLikes(likes);
        2:   64:      break;
        -:   65:    }
        -:   66:  }
        -:   67:
        2:   68:  this->watchlist.erase(this->watchlist.begin() + idx);
        2:   69:}
        -:   70:
        -:   71:
        6:   72:std::vector<Movie> UserController::getQuery() {
        6:   73:  if(this->current == -1) throw std::exception();
        -:   74:
        6:   75:  return this->query;
        -:   76:}
        -:   77:
        -:   78:
        2:   79:std::vector<Movie> UserController::getWatchlist() {
        2:   80:  return this->watchlist;
        6:   81:}
