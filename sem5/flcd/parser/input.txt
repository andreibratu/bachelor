start identifier : int ; identifier : int ; read identifier ; read identifier ; for identifier <- intconst , identifier < intconst , intconst do if identifier % identifier == intconst do identifier <- identifier + intconst ; fi rof if identifier == intconst do write strconst ; fi else write strconst ; esle stop

HEY defaultdict(<class 'list'>, {'program': ['start stmlist stop'], 'const': ['intconst', 'doubleconst', 'charconst', 'strconst'], 'relation': ['<', '<=', '==', '>', '>='], 'type_simp': ['bool', 'int', 'real', 'strconst'], 'type_arr': ['type_simp [ intconst ]'], 'type': ['type_simp', 'type_arr'], 'decl': ['identifier : type ;'], 'decllist': ['decl', 'decl decllist'], 'stm': ['decllist', 'ifstmt', 'forstmt', 'assignstmt', 'lenstmt', 'iostmt'], 'stmlist': ['stm', 'stm stmlist'], 'forstmt': ['for identifier <- term , condition , term do stmlist rof'], 'ifstmt': ['if condition do stmlist fi', 'if condition do stmlist fi else stmlist esle'], 'assignstmt': ['identifier <- expression ;'], 'expression': ['identifier', 'const', 'term', 'op', 'op sym expression'], 'iostmt': ['read identifier ;', 'write term ;'], 'lenstmt': ['len identifier ;'], 'term': ['const', 'identifier', 'identifier [ term ]'], 'sym': ['+', '-', '*', '//', '/', '%'], 'op': ['term sym term', '( term sym term )'], 'condition': ['expression relation expression']})
Traceback (most recent call last):